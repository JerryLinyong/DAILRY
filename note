#11.02
es6的语法对变量的赋值，数据类型的操作增加，让最基本的单位数据类型的操作增加了，把数据分割成一个个基本类型，然后对基本类型数据开始操作，基本数据类型按照
层级分类，聚集成一个个数据集合，如数组，对象，set，map。基本数据类型数字，字符串，布尔，symbol类型的数据。集合放在对象中。对象不仅可以储存数据，还可以
储存方法。方法中有自身的方法，还有继承来的方法使用class来定义对象，extends来继承，还有proxy来拦截原型的方法，reflect用来定义，重写原型的方法。/
还有模块的引用，require是实时的，import是提前的，更加快速，但是其中的数值不能发生变化。还有就是异步操作。promise完成单个异步函数的操作，回调，
而yeild async则是将方法内部的步骤在进行细分。
dom树的建立，css样式表的建立，数值的引用，绑定和方法的挂载
#11.03
数据结构，算法的基本认识。传输数据需要事先规定好数据传输的形式，如何传输，于是有了很多的协议方式。
根据不同的协议，还有不同的框架，衍生出了许多不同的代码库，这些git上的开源代码打包了很多有用的接口，通过下载包，引用，通过api进行相应的操作，唯一比较
麻烦的是由于数据框架，技术一直在发展，所以很多包都要相应的更新，人的需求也在不断改变，代码更新程度将影响到这个技术的使用范围。所以了解人变化的需求和
掌握最新的技术成为当务之急。想要了解人的需求还是要多问人，多去考察。而新技术也是要多问人，多在网上找资料。还有就是如何能够真正的掌握技术。掌握技术在于
掌握其原理，只有把技术的底部实现原理掌握了才算真的掌握，而一项技术通常可以解决多个问题，所以学的深浅也看你的需求有多少！
#11.04
尽量把自己每日所要做的事情变少，然后把每一件事情做好，知识，设备，活动。
#11.05
不怎么需要的东西就不要出现在生活里，会分心，需要的东西也要注意限制，没有限制就不能各自发挥所长！
#11.06
对象的方法的继承和修饰词来为对象添加个别的方法，继承extends添加多个方法，constructor添加独一属性用来区别，
异步通过记号来告诉函数，此次异步执行完毕，可以执行下一个，resolve和reject
（RYZ）
#11.07
  最佳实践：掌握相关技术，根据要求把技术进行合理运用，追求代码量少简单易懂，运行快。
  设计模式：实现项目所需要的技术，并列出在哪要用上这项技术,如store：redux,react-redux,async-storage,MQTT,redux-saga。这是实现store项目所要的技术
  完成项目需要对相关技术的一定了解，由此来进行技术选型，完成设计模式，然后由对技术的深刻理解来完成最佳实践！
  代码的管理：先把框架搭起来，用最简单的代码把整个项目的的依赖库安装，引入在入口文件里，然后创建相应的文件夹，往里面放入相应的代码。以后对项目的更改都
是在相应的文件里面修改，一般情况下尽量不要增减文件数量，会有许多东西要改，所以一开始的项目结构搭建很重要，要确定
  1.需要哪些页面 login main
  2.用什么框架 vue react
  3.ui库，ant design
  4.信息用什么引入，ajax，axios，mqtt
  5.路由怎么搭建
  6.中心仓库是什么
其中路由和技术的选择是要在一开始就做得详细的!
(最佳实践！参考别人的工程文件，文件的结构‘如何模块化’，应用的技术‘选择相应的部分’)\
！开始的页面搭建，然后技术选择，页面：框架和ui，数据处理比较麻烦：语言转换，运用不同的协议获取不同的数据，把数据储存在不同的地方，引用数据，修改数据，
嵌套数据，异步执行，数据类型，依据不同的操作系统有不同的表现引用不同的技术。
 数据储存，引用会影响系统的优化。主要在数据是否可以复用！import和储存和网络请求
（页面样式，响应不同的操作）
（获取数据，数据储存，数据处理）
#11.08
各个组件可能有所依赖，最好是看文档，依据文档来进行使用。组件需要整理，让整个文档结构更加清晰。
对整个项目的需求要很清楚才能把项目很好的切分。
一开始要先有个整体概念，然后根据需求不断往上面添加依赖库和界面。
项目由'页面'和'数据'组成，'组织'它们使其简单易懂。
#11.09
每个电子设备通过不同的协议进行通信。软件硬件，有服务器去处理请求，处理信息。单片机，二极管，芯片等等。wifi透传，tcp/ip，websocket，tcp，mqtt，
http不同的数据连接需要不同的包来处理。对数据的转码也需要包，对转码后的数据也需要包来处理。硬件来提供数据计算，储存，接收，发送，软件来处理数据，
接收。设备处理数据，发送数据，接收数据。硬件知识，数据传输协议，数据处理技术。
  （设备，传输，数据处理）
#11.11
物联网包含软件和硬件，硬件随时间经常会有老化，腐蚀，污浊现象，灰可以清，锈难清。软件上的bug一定有，有时会直接导致电脑进入死循环，cpu被无限占用，
要能够实时监控计算机cpu，内存，硬盘数据。一款好的软件，不仅要用户体验，还要优化性能，尽量少占用cpu，内存，即在很差的电脑上也要运行流畅。衡量软件
优劣可以看看体验和cpu，内存在使用时的数据。掌握物联网就要掌握硬件和软件，让软件更小，性能更加，更加持久。物品老化是一个值得注意的问题。
  信息的查找要靠关键字和在一堆数据里面找出有用的数据。
    （遍历，预测，嵌入）
#11.12
数据以不同的形式展现，储存用二进制，转换成相应的数据要知道数据类型。
git包如果太久没更新有可能会失效，有一些功能源码已经放弃使用了，但是git有提供源码，只要在相应的文件上进行修改就可以使用。源码一般为其设计语言，
js，nodejs，c，pythod。。。
（改git包，改数据类型）
#11.13
位运算是涉及逻辑和数据的储存，是很基础的代码了，不同的二进制组合代表不同的意思。由二进制转换出来更新了更多的储存和传输形式，但都根据一定的格式。
ui界面或是其中的逻辑或许很简单，最可怕的是它进行了很多的扩展，而且不同设备传输的东西不同，如果没有对信息进行规范，单是学习相关文档，相关传输协议
就得花费很多时间。战士打靶看似简单，其实他们花在打靶的时间不多，大多都在进行体能训练，一切都是为了更好的射击。（规范，练习，衍生的练习）
不同类型占据不同的字节，根据不同类型进行不同的数据操作。
tcp以二进制传输，然后根据数据类型读取，一排的二进制数，按字节读取，不足一字节的用0来填充位。
##11.14
要知道代码的底层发生了什么就要对其中涉及的知识有一定了解，可以靠猜，然后去验证，或者去补充学习，要知道这一切绝对不会很难！
写代码要引用很多包，难度就在如何理解接口和避免包之间的冲突。
#11.16
看源码，要先了解整体的结构，在看懂每一句的作用。只有对全面的功能有所了解，才是去了解细节的时机。别人的代码过于庞大复杂，必须在脑海里自行补充其他信息，
在去别人的代码里验证。
源码基于它所基于的代码，在添加上许多的对象方法去把原始对象方法进行绚丽，好用的封装！
（原始方法上的对象包装）
#11.17
看别人的代码，首先是了解其结构，然后才能修改，最后才是优化
要全部结构都看懂才可以改的好，要都能改，才可以优化！
#11.18
声乐和光影的变换是UI的关键！
#11.19
redux中多个reducer合并，让每个reducer分别处理整个应用的一部分。
每个模块各自处理各自的模块，然后在需要的时候引进。
设计模式：通过面向对象，解决问题的方案。
不同设备间可能发生冲突，有时连报错都没有！清空重启是解决方法
js,es语法中基本有对所有类型数据的所有变形操作！
依靠数据间的关系来组织界面！理清数据间的关系是最重要的！
运用对象里面的方法只要参数是同种类型就可以使用！！
props的注入，然后还有数据DOM的引用！
数据类型不只有es中的几种，dom也是一种，相当于一种界面的表现形式。
一切都是模块，都可以往里面加东西，删东西，改东西。用看模块的眼光看一切代码，你就可以一直改，用别人的东西！
通过了解逻辑来更好的理解整个模块，一个个模块的组合变成了项目，有时候要根据要求变化界面，这时候就看自己对底层的逻辑是否清晰。从数据逻辑到页面，
可以是简单的数据类型，也可以是稍微复杂的类型，再到更加复杂的模块化。
#11.20
数据有不同的展示形式，只要掌握了它的形式就可以控制，转换。问题在数据的形式
数据的获取很重要，有时候要改数据需要引入其他对象的方法，这时候对象的继承机制就十分重要。有原型继承，工厂函数继承，构造继承。extends或者直接加！
#11.21
看视频了解一下全貌，靠实践去加深理解！看视频，实践中能对内容做多少的延展就看自己的专注度，思维。
